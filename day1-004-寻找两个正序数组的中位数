原题:https://leetcode-cn.com/problems/median-of-two-sorted-arrays/submissions/

实现：
  1）方法一：创建新vector存储顺序的链表，分别从两个链表中读取，按顺序存入新vector中;取其中位数。时间复杂度是Ｏ(n+m),未能满足题目要求;
  2) 方法二(参考leetcode官方题解)：取两个链表的中位数，两个中位数中较小的一个所在列表中，其中位数之前的元素一定比待求中位数要小，删除中位数之前的数字，重复之前的步骤，当中位数下标k=1时，
  返回所在列表的下标ｋ的值。
  
法一：

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = 0;
        int n = 0;
        int merge_nums_size = nums2.size()+nums1.size();
        if(merge_nums_size==0) return 0;
        vector<int> merge_nums;
        while(m<nums1.size() && n<nums2.size()){
            if(nums2[n]>nums1[m]){
                merge_nums.emplace_back(nums1[m]);
                m++;
            }
            else{
                merge_nums.emplace_back(nums2[n]);
                n++;
            }
        }
        if(m<nums1.size()){
            while(m<nums1.size()){
                merge_nums.emplace_back(nums1[m]);
                m++;
            }
        }else if(n<nums2.size()){
            while(n<nums2.size()){
                merge_nums.emplace_back(nums2[n]);
                n++;
            }
        }

        if (merge_nums_size%2==0){
            return double(merge_nums[merge_nums_size/2]+merge_nums[merge_nums_size/2-1])/2;
        }
        else{
            return double(merge_nums[merge_nums_size/2]);
        }
    }
};

法二（leetcode 题解）：
class Solution {
public:
    int getKthElement(const vector<int>& nums1, const vector<int>& nums2, int k) {
    /* 主要思路：要找到第 k (k>1) 小的元素，那么就取 pivot1 = nums1[k/2-1] 和 pivot2 = nums2[k/2-1] 进行比较
         * 这里的 "/" 表示整除
         * nums1 中小于等于 pivot1 的元素有 nums1[0 .. k/2-2] 共计 k/2-1 个
         * nums2 中小于等于 pivot2 的元素有 nums2[0 .. k/2-2] 共计 k/2-1 个
         * 取 pivot = min(pivot1, pivot2)，两个数组中小于等于 pivot 的元素共计不会超过 (k/2-1) + (k/2-1) <= k-2 个
         * 这样 pivot 本身最大也只能是第 k-1 小的元素
         * 如果 pivot = pivot1，那么 nums1[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 "删除"，剩下的作为新的 nums1 数组
         * 如果 pivot = pivot2，那么 nums2[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 "删除"，剩下的作为新的 nums2 数组
         * 由于我们 "删除" 了一些元素（这些元素都比第 k 小的元素要小），因此需要修改 k 的值，减去删除的数的个数
         */
        int m = nums1.size();
        int n = nums2.size();
        int index1 = 0, index2 = 0;

        while (true) {
            // 边界情况
            if (index1 == m) {
                return nums2[index2 + k - 1];
            }
            if (index2 == n) {
                return nums1[index1 + k - 1];
            }
            if (k == 1) {
                return min(nums1[index1], nums2[index2]);
            }

            // 正常情况
            int newIndex1 = min(index1 + k / 2 - 1, m - 1);
            int newIndex2 = min(index2 + k / 2 - 1, n - 1);
            int pivot1 = nums1[newIndex1];
            int pivot2 = nums2[newIndex2];
            if (pivot1 <= pivot2) {
                k -= newIndex1 - index1 + 1;
                index1 = newIndex1 + 1;
            }
            else {
                k -= newIndex2 - index2 + 1;
                index2 = newIndex2 + 1;
            }
        }
    }

    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int totalLength = nums1.size() + nums2.size();
        if (totalLength % 2 == 1) {
            return getKthElement(nums1, nums2, (totalLength + 1) / 2);
        }
        else {
            return (getKthElement(nums1, nums2, totalLength / 2) + getKthElement(nums1, nums2, totalLength / 2 + 1)) / 2.0;
        }
    }
};
